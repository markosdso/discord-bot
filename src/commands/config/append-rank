const { ApplicationCommandOptionType } = require('discord.js');
const { EmbedBuilder } = require('discord.js');
const Rollercoaster = require('../../models/rollercoaster');
const User = require('../../models/user');
const Ranking = require('../../models/ranking');
const Sequelize = require('sequelize');

module.exports = {
    name: 'append-rank',
    description: 'add a coaster to the end of your rankings',
    options: [
        {
            name: 'name',
            description: 'rollercoaster and park nae',
            type: ApplicationCommandOptionType.String,
            autocomplete: true,
            required: true
        },

    ],

    autocomplete: async(client, interaction) => {
        try {
            const focusedValue = interaction.options.getFocused();

            const filteredChoices = await Rollercoaster.findAll({
                attributes: ['name', 'park'],
                limit: 5,
                where: {
                    name: {
                        [Sequelize.Op.like]: focusedValue + "%",
                    }
                }
            });

            const results = filteredChoices.map((choice) => {
                return {
                    name: `${choice.name}, ${choice.park}`,
                    value: `${choice.name}, ${choice.park}`
                }
            });

            interaction.respond(results).catch(() => {});



        } catch (error) {
            console.log(`ERROR: ${error}`);
        }
    },

    callback: async (client, interaction) => {
        try {
            const composite = interaction.options.get('name').value;

            const split = composite.split(", ");
            const name = split[0];
            const park = split[1];

            const id = interaction.user.id;

            const rollercoaster = await Rollercoaster.findOne({ 
                where: { 
                    name: name, 
                    park: park,
                } 
            });

            if (!rollercoaster) {
                interaction.reply('Rollercoaster does not exist');
                return;
            }

            const user = await User.findOne({ 
                where: { 
                    id: id
                } 
            });

            if (!user) {
                interaction.reply('User profile not registered');
                return;
            }

            let rank = await Ranking.max('rank', { where: { id: id } } );
            if(!rank) {
                rank = 0
            }
            rank = rank + 1;

            const ranking = await Ranking.create({
                name: name,
                park: park,
                id: id,
                rank: rank,
                
            });

            const embed = new EmbedBuilder()
                .setColor('DarkOrange')
                .setTitle(`${name} added as rank ${rank}`);

            interaction.reply({ embeds: [embed]});
            
        } catch (error) {
             interaction.reply(`ERROR: ${error}`);
        }

    }
}